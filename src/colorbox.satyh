@require: list
@require: color
@require: base/list-ext
@require: base/length
@require: base/float
@require: fss/style
@require: fss/fss

type colorbox-line-config = (|
  color: color;
  thickness: length;
|)

type colorbox-corner-path = (length*length) -> (
  (length*length)*% start
  (length*length)*% end
  (pre-path -> pre-path) * % 反時計回り
  (graphics list)
)
type colorbox-frame = (|
  left-top: colorbox-corner-path;
  right-top: colorbox-corner-path;
  left-bottom: colorbox-corner-path;
  right-bottom: colorbox-corner-path;
  top-rule: (length*length) -> (length*length) -> (pre-path -> pre-path);
  bottom-rule: (length*length) -> (length*length) -> (pre-path -> pre-path);
  left-rule: (length*length) -> (length*length) -> (pre-path -> pre-path);
  right-rule: (length*length) -> (length*length) -> (pre-path -> pre-path);
|)


type colorbox-config = (|
  left-skip: length;
  right-skip: length;
  before-skip: length;
  after-skip: length;
  left: length;
  right: length;
  top: length;
  bottom: length;
  boxsep: length;
  boxrule: length;
  color-frame: color;
  color-back: color;
|)

type colorbox-title = (|
  make-box: colorbox-config -> context -> inline-text -> inline-boxes;
  graphics: colorbox-config ->  context -> (length*length) -> length -> length -> length -> inline-boxes -> (graphics list);
  shifts: colorbox-config ->  context -> inline-boxes -> (length * length); % 枠自身のずらし，さらに本文のずらし
|)

type colorbox-normal-title-config = (|
  frame: colorbox-frame;
  top-title: length;
  bottom-title: length;
  left-title: length;
  right-title: length;
  fonttitle: style list;
  color-title: color;
  color-back-title: color;
|)

module Colorbox : sig
  val colorbox-scheme: colorbox-config -> colorbox-frame -> colorbox-title -> context -> inline-text ?-> block-text -> block-boxes
  val default-config: colorbox-config
  val normal-frame: colorbox-frame
  val circle-frame: length -> colorbox-frame
  val normal-title: colorbox-normal-title-config -> colorbox-title
  val normal-title-default-config: colorbox-normal-title-config

  val boxed-title: (|
    frame: colorbox-frame;
    top-title: length;
    bottom-title: length;
    left-title: length;
    right-title: length;
    fonttitle: style list;
    color-title: color;
    color-back-title: color;
  |) -> colorbox-title
end = struct

let len-to-str l = Float.to-string (Length.to-float l) ^ `pt`
let colorbox-scheme config frame-scheme title-scheme ctx ?:title-txt txt =
  let (is-title-available,title-ib,frame-shift,body-shift) =
    match title-txt with
    | Some(t) -> 
      let ib = title-scheme#make-box config ctx t in
      let (fs,bs) = title-scheme#shifts config ctx ib in
      (true,ib,fs,bs)
    | None -> (false,inline-nil,0pt,0pt)
  in
  let null-deco _ _ _ _ = [] in
  let null-decos = (null-deco,null-deco,null-deco,null-deco) in
  let paddings = (
    config#left +' config#boxsep,
    config#right +' config#boxsep,
    config#top +' frame-shift +' body-shift +' config#boxsep,
    config#bottom +' config#boxsep
  ) in
  let deco-top-path (x,y) width height depth =
    let (lt-r,lt-b,lt-path,lt-gr) = frame-scheme#left-top (x,y +' height -' frame-shift) in
    let (rt-b,rt-l,rt-path,rt-gr) = frame-scheme#right-top (x +' width,y +' height -' frame-shift) in
    let path p = p |> rt-path |> (frame-scheme#top-rule rt-l lt-r) |> lt-path in
    (rt-b,lt-b,path,(List.append lt-gr rt-gr))
  in
  let deco-bottom-path (x,y) width height depth =
    let (lb-t,lb-r,lb-path,lb-gr) = frame-scheme#left-bottom (x,y -' depth) in
    let (rb-l,rb-t,rb-path,rb-gr) = frame-scheme#right-bottom (x +' width,y -' depth) in
    let path p = p |> lb-path |> (frame-scheme#bottom-rule lb-r rb-l) |> rb-path  in
    (lb-t,rb-t,path,(List.append lb-gr rb-gr))
  in
  let deco-ro pt width height depth =
    let (rt,lt,t-path,t-gr) = deco-top-path pt width height depth in
    let (lb,rb,b-path,b-gr) = deco-bottom-path pt width height depth in
    let gr = stroke config#boxrule config#color-frame (
      start-path rb |> (frame-scheme#right-rule rb rt) |> t-path |> (frame-scheme#left-rule lt lb) |> b-path |> close-with-line
    ) in
    if is-title-available then
      List.append (List.append (List.append [gr;] (title-scheme#graphics config ctx pt width height depth title-ib)) t-gr) b-gr
    else [gr;]
  in
  let deco-dougamae (x,y) width height depth = 
    let (rt,lt,t-path,t-gr) = deco-top-path (x,y) width height depth in
    let gr = stroke config#boxrule config#color-frame (
      start-path (x +' width, y -' depth) |> (frame-scheme#right-rule (x +' width, y -' depth) rt) |> t-path
       |> (frame-scheme#left-rule lt (x,y -' depth)) |> terminate-path
    ) in
    if is-title-available then
      List.append (List.append [gr;] (title-scheme#graphics config ctx (x,y) width height depth title-ib)) t-gr
    else [gr;]
  in
  let deco-ukebako (x,y) width height depth =
    let (lb,rb,b-path,b-gr) = deco-bottom-path (x,y) width height depth in
    List.append [
      stroke config#boxrule config#color-frame (
        start-path (x,y +' height) |> (frame-scheme#left-rule (x,y +' height) lb) |> b-path
          |> (frame-scheme#right-rule rb (x +' width,y +' height)) |> terminate-path
      );
    ] b-gr
  in
  let deco-tate2bou (x,y) width height depth = 
    [
      stroke config#boxrule config#color-frame (start-path (x,y +' height) |> (frame-scheme#left-rule (x,y +' height) (x,y -' depth)) |> terminate-path);
      stroke config#boxrule config#color-frame (start-path (x +' width,y +' height) |> (frame-scheme#right-rule (x +' width,y +' height) (x +' width,y -' depth)) |> terminate-path);
    ]
  in
  (
    (
      block-frame-breakable ctx (config#left-skip,config#right-skip,config#before-skip,config#after-skip) null-decos (fun c -> (
      block-frame-breakable c
        paddings
        (deco-ro,deco-dougamae,deco-tate2bou,deco-ukebako)
        (fun inctx -> (read-block inctx txt))
      ))
    )
  )

let normal-rule from to = line-to to 
let normal-corner pt = (pt,pt,(fun p -> p),[])
let normal-frame = (|
  left-top = normal-corner;
  right-top = normal-corner;
  left-bottom = normal-corner;
  right-bottom = normal-corner;
  top-rule = normal-rule;
  bottom-rule = normal-rule;
  left-rule = normal-rule;
  right-rule = normal-rule;
|)

let quarter-circle angle radius (x,y) =
  let (c,s) = (cos (angle *. 3.14159 /. 180.0),sin (angle *. 3.14159 /. 180.0)) in
  let (stx,sty) = (x +' (radius *' c),y +' (radius *' s)) in
  let (enx,eny) = (x -' (radius *' s),y +' (radius *' c)) in
  let ctrl = radius *' 0.55228 in
  (
    (stx,sty),(enx,eny),
    (fun p -> (p
      |> bezier-to (stx -' (ctrl *' s),sty +' (ctrl *' c)) (enx +' (ctrl *' c),eny +' (ctrl *' s)) (enx,eny)
    )),
    []
  )

let circle-frame radius = (|
  right-top = (fun (x,y) -> quarter-circle 0.0 radius (x -' radius,y -' radius));
  left-top = (fun (x,y) -> quarter-circle 90.0 radius (x +' radius,y -' radius));
  left-bottom = (fun (x,y) -> quarter-circle 180.0 radius (x +' radius,y +' radius));
  right-bottom = (fun (x,y) -> quarter-circle 270.0 radius (x -' radius,y +' radius));
  top-rule = normal-rule;
  bottom-rule = normal-rule;
  left-rule = normal-rule;
  right-rule = normal-rule;
|)

let normal-title-make-box title-config config ctx title-it =
  read-inline (ctx |> set-text-color title-config#color-title) {\font-style (title-config#fonttitle) {#title-it;}}

let normal-title-graphics-titlebb title-config config ctx title-ib =
  let null-deco _ _ _ _ = [] in
  let null-decos = (null-deco,null-deco,null-deco,null-deco) in
  block-frame-breakable ctx (
    config#left +' title-config#left-title +' config#boxsep,config#right +' title-config#right-title +' config#boxsep,
    title-config#top-title +' config#boxsep, title-config#bottom-title +' config#boxsep
  ) null-decos (fun inctx -> (
    line-break false false inctx (title-ib ++ inline-fil)
  ))

let normal-title-shifts title-config config ctx title-ib = 
  (0pt,get-natural-length (normal-title-graphics-titlebb title-config config ctx title-ib))

let normal-title-graphics title-config config ctx (x,y) width height depth title-ib =
  let title-ib-from-bb = 
    (inline-skip (0pt -' config#left)) ++
    embed-block-breakable ctx (normal-title-graphics-titlebb title-config config ctx title-ib)
  in
  let (title-w,title-h,title-d) = get-natural-metrics title-ib-from-bb in
  let shift = title-h +' title-d in
  let (lt,rt,top-path,top-gr) = 
    let (lt-r,lt-b,lt-path,lt-gr) = title-config#frame#left-top (x,y +' height) in
    let (rt-b,rt-l,rt-path,rt-gr) = title-config#frame#right-top (x +' width,y +' height) in
    (lt-b,rt-b,(fun p -> (p |> rt-path |> (title-config#frame#top-rule rt-l lt-r) |> lt-path)),List.append lt-gr rt-gr)
  in
  let start-pt = (x +' width,y +' height -' (title-h +' title-d)) in
  List.append [
    fill title-config#color-back-title (
      start-path start-pt |> (title-config#frame#right-rule start-pt rt) |> top-path
        |> (title-config#frame#left-rule lt (x,y +' height -' (title-h +' title-d))) |> close-with-line
    );
    draw-text (x +' config#left,y +' height -' title-h) title-ib-from-bb;
  ] top-gr

let normal-title title-config = (|
  make-box = normal-title-make-box title-config;
  graphics = normal-title-graphics title-config;
  shifts = normal-title-shifts title-config;
|)

let boxed-title-graphics-title-b title-config config ctx title-ib =
  let paddings = (
    config#left +' config#boxsep,
    config#right +' config#boxsep,
    config#top +' config#boxsep,
    config#bottom +' config#boxsep
  ) in
  let deco (x,y) width height depth =
    let (rt-b,rt-l,rt-path,rt-gr) = title-config#frame#right-top (x +' width,y +' height) in
    let (lt-r,lt-b,lt-path,lt-gr) = title-config#frame#left-top (x,y +' height) in
    let (lb-t,lb-r,lb-path,lb-gr) = title-config#frame#left-bottom (x,y -' depth) in
    let (rb-l,rb-t,rb-path,rb-gr) = title-config#frame#right-bottom (x +' width,y -' depth) in
    let path = start-path rt-b
      |> rt-path |> (title-config#frame#top-rule rt-l lt-r) |> lt-path |> (title-config#frame#left-rule lt-b lb-t) |> lb-path
        |> (title-config#frame#bottom-rule lb-r rb-l) |> rb-path |> (title-config#frame#right-rule rb-t rt-b) |> close-with-line
    in
    [
      fill title-config#color-back-title path;
      stroke config#boxrule config#color-frame path;
    ]
  in
  (inline-skip (0pt -' config#left)) ++ inline-frame-outer paddings deco title-ib

let boxed-title-shifts title-config config ctx title-b =
  let (w,h,d) = get-natural-metrics (boxed-title-graphics-title-b title-config config ctx title-b) in
  (h +' d,0pt)

let boxed-title-graphics title-config config ctx (x,y) width height depth title-ib =
  let title-framed-ib = boxed-title-graphics-title-b title-config config ctx title-ib in
  let (w,h,d) = get-natural-metrics title-framed-ib in
  [
    draw-text (x +' config#left,y +' height -' h) title-framed-ib;
  ]

let boxed-title title-config = (|
  make-box = normal-title-make-box title-config;
  graphics = boxed-title-graphics title-config;
  shifts = boxed-title-shifts title-config;
|)
%  

let default-config = (|
  left-skip = 0pt;
  right-skip = 0pt;
  before-skip = 0pt;
  after-skip = 0pt;
  left = 4mm;
  right = 4mm;
  top = 2mm;
  bottom = 2mm;
  boxsep = 1mm;
  boxrule = 0.5mm;
  color-back = Color.white;
  color-frame = (Color.gray 0.2);
|)

let normal-title-default-config = (|
  frame = circle-frame 3pt;
  top-title = 0pt;
  bottom-title = 0pt;
  left-title = 0pt;
  right-title = 0pt;
  fonttitle = [];
  color-title = Color.white;
  color-back-title = (Color.gray 0.2);
|)

end

