@require: list
@require: color
@require: base/list-ext
@require: base/length
@require: base/float
@require: fss/style
@require: fss/fss

type colorbox-line-config = (|
  color: color;
  thickness: length;
|)

type colorbox-corner-path = (length*length) -> (
  (length*length)*% start
  (length*length)*% end
  (pre-path -> pre-path) * % 反時計回り
  (graphics list)
)

type colorbox-config = (|
  left-skip: length;
  right-skip: length;
  before-skip: length;
  after-skip: length;
  left: length;
  right: length;
  top: length;
  bottom: length;
  color-back: color;
|)

type colorbox-frame = (|
  left-top: colorbox-config -> (length*length) -> ((length*length)*(length*length)*(pre-path -> pre-path)*(graphics list));
  right-top: colorbox-config -> (length*length) -> ((length*length)*(length*length)*(pre-path -> pre-path)*(graphics list));
  left-bottom: colorbox-config -> (length*length) -> ((length*length)*(length*length)*(pre-path -> pre-path)*(graphics list));
  right-bottom: colorbox-config -> (length*length) -> ((length*length)*(length*length)*(pre-path -> pre-path)*(graphics list));
  top-rule: colorbox-config -> (length*length) -> (length*length) -> ((pre-path -> pre-path)*(graphics list));
  bottom-rule: colorbox-config -> (length*length) -> (length*length) -> ((pre-path -> pre-path)*(graphics list));
  left-rule: colorbox-config -> (length*length) -> (length*length) -> ((pre-path -> pre-path)*(graphics list));
  right-rule: colorbox-config -> (length*length) -> (length*length) -> ((pre-path -> pre-path)*(graphics list));
|)

type colorbox-title = (|
  make-box: colorbox-config -> colorbox-frame -> context -> inline-text -> inline-boxes;
  graphics: colorbox-config -> colorbox-frame -> context -> (length*length) -> length -> length -> length -> inline-boxes -> (graphics list);
  shifts: colorbox-config -> colorbox-frame -> context -> inline-boxes -> (length * length * length); % 枠自身のずらし，本文のずらし，下方向枠ずらし
|)

module Colorbox : sig
  val colorbox-scheme: colorbox-config -> colorbox-frame -> colorbox-title -> context -> inline-text ?-> block-text -> block-boxes
  val normal-frame: (|
    color: color;
    top-rule: length;
    bottom-rule: length;
    right-rule: length;
    left-rule: length;
  |) -> colorbox-frame
  val circle-frame: (|
    color: color;
    top-rule: length;
    bottom-rule: length;
    right-rule: length;
    left-rule: length;
    radius: length;
  |) -> colorbox-frame
  val normal-title: (|
    top: length;
    bottom: length;
    left: length;
    right: length;
    fonttitle: style list;
    color: color;
    color-back: color;
    bottom-rule: length;
    color-frame: color;
  |) -> colorbox-title
  val boxed-title: (|
    frame: colorbox-frame;
    top: length;
    bottom: length;
    left: length;
    right: length;
    fonttitle: style list;
    color: color;
    color-back: color;
    % height depth
    shift-x: length -> length -> length;
    % 枠のwidth objのwidth 
    shift-y: length -> length -> length;
  |) -> colorbox-title
  type colorbox-option
  val +colorbox : [(colorbox-option list)?; inline-text?; block-text] block-cmd
end = struct

let len-to-str l = Float.to-string (Length.to-float l) ^ `pt`
let colorbox-scheme config frame title-scheme ctx ?:title-txt txt =
  let (is-title-available,title-ib,frame-shift,body-shift,bottom-shift) =
    match title-txt with
    | Some(t) -> 
      let ib = title-scheme#make-box config frame ctx t in
      let (fs,bs,bots) = title-scheme#shifts config frame ctx ib in
      (true,ib,fs,bs,bots)
    | None -> (false,inline-nil,0pt,0pt,0pt)
  in
  let null-deco _ _ _ _ = [] in
  let null-decos = (null-deco,null-deco,null-deco,null-deco) in
  let paddings = (config#left,config#right,config#top,config#bottom) in
  let deco-top-path (x,y) width height depth =
    let (lt-r,lt-b,lt-path,lt-gr) = frame#left-top config (x,y +' height +' frame-shift) in
    let (rt-b,rt-l,rt-path,rt-gr) = frame#right-top config (x +' width,y +' height +' frame-shift) in
    let (t-path,t-gr) = frame#top-rule config rt-l lt-r in
    let path p = p |> rt-path |>  t-path |> lt-path in
    (rt-b,lt-b,path,(List.concat [rt-gr;t-gr;lt-gr]))
  in
  let deco-bottom-path (x,y) width height depth =
    let (lb-t,lb-r,lb-path,lb-gr) = frame#left-bottom config (x,y -' depth +' bottom-shift) in
    let (rb-l,rb-t,rb-path,rb-gr) = frame#right-bottom config (x +' width,y -' depth+' bottom-shift) in
    let (b-path,b-gr) = frame#bottom-rule config lb-r rb-l in
    let path p = p |> lb-path |> b-path |> rb-path  in
    (lb-t,rb-t,path,(List.concat [lb-gr;b-gr;rb-gr]))
  in
  let deco-ro pt width height depth =
    let (rt,lt,t-path,t-gr) = deco-top-path pt width height depth in
    let (lb,rb,b-path,b-gr) = deco-bottom-path pt width height depth in
    let (r-path,r-gr) = frame#right-rule config rb rt in
    let (l-path,l-gr) = frame#left-rule config lt lb in
    let back-gr = [fill config#color-back (start-path rt |> t-path |> l-path |> b-path |> r-path |> close-with-line)] in
    let gr = List.concat [back-gr;t-gr;l-gr;b-gr;r-gr] in
    if is-title-available then
      let title-gr = title-scheme#graphics config frame ctx pt width height depth title-ib in
      List.append gr title-gr
    else gr
  in
  let deco-dougamae (x,y) width height depth = 
    let (rt,lt,t-path,t-gr) = deco-top-path (x,y) width height depth in
    let (l-path,l-gr) = frame#left-rule config lt (x,y -' depth) in
    let (r-path,r-gr) = frame#right-rule config (x +' width, y -' depth) rt in
    let back-gr = [fill config#color-back (start-path (x +' width, y -' depth) |> r-path |> t-path |> l-path |> close-with-line)] in
    let gr = List.concat [back-gr;r-gr;t-gr;l-gr] in
    if is-title-available then
      let title-gr = title-scheme#graphics config frame ctx (x,y) width height depth title-ib in
      List.append gr title-gr
    else gr
  in
  let deco-ukebako (x,y) width height depth =
    let (lb,rb,b-path,b-gr) = deco-bottom-path (x,y) width height depth in
    let (l-path,l-gr) = frame#left-rule config (x,y +' height) lb in
    let (r-path,r-gr) = frame#right-rule config rb (x +' width,y +' height) in
    let back-gr = [fill config#color-back (start-path (x, y +' height) |> l-path |> b-path |> r-path |> close-with-line)] in
    List.concat [back-gr;l-gr;b-gr;r-gr]
  in
  let deco-tate2bou (x,y) width height depth = 
    let (l-path,l-gr) = frame#left-rule config (x,y +' height) (x,y -' depth) in
    let (r-path,r-gr) = frame#right-rule config (x +' width,y -' depth) (x +' width,y +' height) in
    let back-gr = [fill config#color-back (start-path (x +' width, y -' depth) |> r-path |> line-to (x,y +' height) |> l-path |> close-with-line);] in
    List.concat [back-gr;l-gr;r-gr]
  in
  let large-skip = 10000pt in
  let empty-inline-bb = inline-graphics 10pt 10pt 10pt (fun pt -> []) in
  let dummy-bb = line-break false false (set-paragraph-margin 0pt 0pt ctx) (empty-inline-bb ++ inline-fil) in
  let dummy-len = get-natural-length dummy-bb in
  let out-block c =
    block-frame-breakable c
      paddings
      (deco-ro,deco-dougamae,deco-tate2bou,deco-ukebako)
      (fun inctx -> (
        if Length.((frame-shift +' body-shift) == 0pt) then block-nil
        else
          (block-skip (0pt -' frame-shift -' body-shift -' (large-skip *' 1.0) -' dummy-len)) +++
          (line-break false false (set-paragraph-margin 0pt large-skip ctx) (empty-inline-bb ++ inline-fil))
      ) +++ (read-block inctx txt)) +++ (
        if Length.(bottom-shift == 0pt) then block-nil
        else
          (line-break false false (set-paragraph-margin large-skip 0pt ctx) (empty-inline-bb ++ inline-fil)) +++
          (block-skip (0pt -' frame-shift -' body-shift -' (large-skip *' 1.0) -' dummy-len))
      )
  in
  if
    Length.(config#left-skip == 0pt) &&
    Length.(config#right-skip == 0pt) &&
    Length.(config#before-skip == 0pt) &&
    Length.(config#after-skip == 0pt)
  then out-block ctx
  else block-frame-breakable ctx (config#left-skip,config#right-skip,config#before-skip,config#after-skip) null-decos out-block

let normal-rule thickness color cfg from to = ((line-to to),[stroke thickness color (start-path from |> line-to to |> terminate-path)])
let normal-corner cfg pt = (pt,pt,(fun p -> p),[])
let normal-frame config = (|
  left-top = normal-corner;
  right-top = normal-corner;
  left-bottom = normal-corner;
  right-bottom = normal-corner;
  top-rule = normal-rule config#top-rule config#color;
  bottom-rule = normal-rule config#bottom-rule config#color;
  left-rule = normal-rule config#left-rule config#color;
  right-rule = normal-rule config#right-rule config#color;
|)

let get-stroke-frame-corner-transform from-rule to-rule angle (from-x,from-y) (to-x,to-y) =
  let (c,s) = (cos (angle *. 3.14159 /. 180.0),sin (angle *. 3.14159 /. 180.0)) in
  % 原点シフト→-angle回転→(a,b)相似変換→angle変換→(原点シフト)^{-1}
  % (m11,m_12,m_21,m_22,shift-x,shift-y)，シフトは行列かけた後
  let make-matrix a b = (
    (1.0 -. a)*.c*.c +. (1.0 -. b)*.s*.s,
    (b -. a)*.s*.c,
    (b -. a)*.s*.c,
    (1.0 -. a)*.s*.s +. (1.0 -. b)*.c*.c,
    to-x*'a*.c*.c +' from-x*'b*.s*.s +' to-y*'a*.c*.s -' from-y*'b*.c*.s,
    to-x*'a*.c*.s -' from-x*'b*.c*.s +' to-y*'a*.s*.s +' from-y*'b*.c*.c
  ) in
  let abs l = if Length.(l < 0pt) then (0pt -' l) else l in
  let from-dist = abs ((from-x -' to-x) *' c +' (from-y -' to-y) *' s) in
  let to-dist = abs ((from-x -' to-x) *' s -' (from-y -' to-y) *' c) in
  let from-scale = (from-rule /' from-dist) *. 0.5 in
  let to-scale = (to-rule /' to-dist) *. 0.5 in
  let (o11,o12,o21,o22,o-shift-x,o-shift-y) = make-matrix (0.0 -. from-scale) (0.0 -. to-scale) in
  let (i11,i12,i21,i22,i-shift-x,i-shift-y) = make-matrix from-scale to-scale in
  let trans-i (xx,yy) = (xx *' i11 +' yy  *' i12 +' i-shift-x,xx *' i21 +' yy *' i22 +' i-shift-y) in
  let trans-o (xx,yy) = (xx *' o11 +' yy  *' o12 +' o-shift-x,xx *' o21 +' yy *' o22 +' o-shift-y) in
  (trans-i,trans-o)

let circle-frame-corner-path angle radius (x,y) =
  let (c,s) = (cos (angle *. 3.14159 /. 180.0),sin (angle *. 3.14159 /. 180.0)) in
  let (stx,sty) = (x +' (radius *' s),y -' (radius *' c)) in
  let (enx,eny) = (x -' (radius *' c),y -' (radius *' s)) in
  let ctrl = radius *' 0.55228 in
  (
    (stx,sty),
    (stx -' (ctrl *' s),sty +' (ctrl *' c)),
    (enx +' (ctrl *' c),eny +' (ctrl *' s)),
    (enx,eny)
  )

let circle-frame-corner-graphics frame-config angle config (x,y) =
  let (from-rule,to-rule) =
    if Float.(angle == 0.0) then (frame-config#right-rule,frame-config#top-rule)
    else if Float.(angle == 90.0) then (frame-config#top-rule,frame-config#left-rule)
    else if Float.(angle == 180.0) then (frame-config#left-rule,frame-config#bottom-rule)
    else if Float.(angle == 270.0) then (frame-config#bottom-rule,frame-config#right-rule)
    else 
      % BUG
      let () = abort-with-message (#`invalid angle `# ^ (Float.to-string angle) ^ #` in circle-frame-corner-graphics, may be a bug`#) in
      (0pt,0pt)
  in
  let (from,ctrl1,ctrl2,to) = circle-frame-corner-path angle frame-config#radius (x,y) in
  let path = bezier-to ctrl1 ctrl2 to in
  if Length.(from-rule == to-rule) then 
    (from,to,path,[stroke from-rule frame-config#color (start-path from |>  path |> terminate-path)])
  else 
    let (trans-i,trans-o) = get-stroke-frame-corner-transform from-rule to-rule angle from to in
    let (from-i,ctrl1-i,ctrl2-i,to-i) = (trans-i from,trans-i ctrl1,trans-i ctrl2,trans-i to) in
    let (from-o,ctrl1-o,ctrl2-o,to-o) = (trans-o from,trans-o ctrl1,trans-o ctrl2,trans-o to) in
    let gr = fill frame-config#color (start-path from-o |> bezier-to ctrl1-o ctrl2-o to-o |> line-to to-i |> bezier-to ctrl2-i ctrl1-i from-i |> close-with-line) in
    (from,to,path,[gr;])

let circle-frame frame-config = (|
  right-top = circle-frame-corner-graphics frame-config 0.0;
  left-top = circle-frame-corner-graphics frame-config 90.0;
  left-bottom = circle-frame-corner-graphics frame-config 180.0;
  right-bottom = circle-frame-corner-graphics frame-config 270.0;
  top-rule = normal-rule frame-config#top-rule frame-config#color;
  bottom-rule = normal-rule frame-config#bottom-rule frame-config#color;
  left-rule = normal-rule frame-config#left-rule frame-config#color;
  right-rule = normal-rule frame-config#right-rule frame-config#color;
|)

let normal-title-make-box title-config config frame ctx title-it =
  read-inline (ctx |> set-text-color title-config#color) {\font-style (title-config#fonttitle) {#title-it;}}

let normal-title-graphicsbb title-config config ctx title-ib =
  let null-deco _ _ _ _ = [] in
  let null-decos = (null-deco,null-deco,null-deco,null-deco) in
  block-frame-breakable ctx (
    title-config#left,title-config#right,
    title-config#top,title-config#bottom
  ) null-decos (fun inctx -> (
    line-break false false inctx (title-ib ++ inline-fil)
  ))

let normal-title-shifts title-config config frame ctx title-ib = 
  (0pt,0pt -' get-natural-length (normal-title-graphicsbb title-config config ctx title-ib),0pt)

let normal-title-graphics title-config config frame ctx (x,y) width height depth title-ib =
  let title-ib-from-bb = 
    embed-block-breakable ctx (normal-title-graphicsbb title-config config ctx title-ib)
  in
  let (title-w,title-h,title-d) = get-natural-metrics title-ib-from-bb in
  let shift = title-h +' title-d in
  let (lt-r,lt-b,lt-path,lt-gr) = frame#left-top config (x,y +' height) in
  let (rt-b,rt-l,rt-path,rt-gr) = frame#right-top config (x +' width,y +' height) in
  let (t-path,t-gr) = frame#top-rule config rt-l lt-r in
  let (r-path,r-gr) = frame#right-rule config (x +' width,y +' height -' (title-h +' title-d)) rt-b in
  let (l-path,l-gr) = frame#left-rule config lt-b (x,y +' height -' (title-h +' title-d)) in
  let start-pt = (x +' width,y +' height -' (title-h +' title-d)) in
  List.concat [
    [fill title-config#color-back (start-path start-pt |> r-path |> rt-path |> t-path |> lt-path |> l-path |> close-with-line)];
    [stroke title-config#bottom-rule title-config#color-frame (
      start-path (x,y +' height -' (title-h +' title-d)) |> line-to (x +' width,y +' height -' (title-h +' title-d)) |> terminate-path
    )];
    r-gr;rt-gr;t-gr;lt-gr;l-gr;
    [draw-text (x,y +' height -' title-h) title-ib-from-bb];
  ]

let normal-title title-config = (|
  make-box = normal-title-make-box title-config;
  graphics = normal-title-graphics title-config;
  shifts = normal-title-shifts title-config;
|)

let boxed-title-graphics-title-b title-config config ctx title-ib =
  let paddings = (
    title-config#left,
    title-config#right,
    title-config#top,
    title-config#bottom
  ) in
  let deco (x,y) width height depth =
    let (rt-b,rt-l,rt-path,rt-gr) = title-config#frame#right-top config (x +' width,y +' height) in
    let (lt-r,lt-b,lt-path,lt-gr) = title-config#frame#left-top config (x,y +' height) in
    let (lb-t,lb-r,lb-path,lb-gr) = title-config#frame#left-bottom config (x,y -' depth) in
    let (rb-l,rb-t,rb-path,rb-gr) = title-config#frame#right-bottom config (x +' width,y -' depth) in
    let (t-path,t-gr) = title-config#frame#top-rule config rt-l lt-r in
    let (l-path,l-gr) = title-config#frame#left-rule config lt-b lb-t in
    let (b-path,b-gr) = title-config#frame#bottom-rule config lb-r rb-l in
    let (r-path,r-gr) = title-config#frame#right-rule config rb-t rt-b in
    let path = start-path rt-b
      |> rt-path |> t-path |> lt-path |> l-path |> lb-path |> b-path |> rb-path |> r-path |> terminate-path
    in
    List.concat [
      [fill title-config#color-back path];
      rt-gr;t-gr;lt-gr;l-gr;lb-gr;b-gr;rb-gr;r-gr
    ]
  in
  inline-frame-outer paddings deco title-ib

let boxed-title-shifts title-config config frame ctx title-b =
  let (w,h,d) = get-natural-metrics (boxed-title-graphics-title-b title-config config ctx title-b) in
  let sy = title-config#shift-y h d in
  let box-v-length = h +' d in
  if h +' d +' sy >' 0pt then (0pt -' h -' d -' sy,sy,0pt)
  else (0pt,sy,0pt)

let boxed-title-graphics title-config config frame ctx (x,y) width height depth title-ib =
  let title-framed-ib = boxed-title-graphics-title-b title-config config ctx title-ib in
  let (w,h,d) = get-natural-metrics title-framed-ib in
  let sx = title-config#shift-x width w in
  let sy = title-config#shift-y h d in
  let new-sy =
    if h +' d +' sy >' 0pt then 0pt
    else h +' d +' sy
  in
  [
    draw-text (x +' sx,y +' height -' h +' new-sy) title-framed-ib;
  ]

let boxed-title title-config = (|
  make-box = normal-title-make-box title-config;
  graphics = boxed-title-graphics title-config;
  shifts = boxed-title-shifts title-config;
|)

let title-type-normal = 1
let title-type-boxed-top-left = 2
let title-type-boxed-top-center = 3
let title-type-boxed-top-right = 4

type colorbox-option-data = (|
  left: length;
  right: length;
  bottom: length;
  top: length;
  toptitle: length;
  bottomtitle: length;
  lefttitle: length;
  righttitle: length;
  boxsep: length;
  coltext: color;
  colframe: color;
  colback: color;
  fonttitle: style list;
  coltitle: color;
  colbacktitle: color;
  title-filled: bool;
  title-type: int;
  before-skip: length;
  after-skip: length;
  left-skip: length;
  right-skip: length;
  toprule: length;
  bottomrule: length;
  leftrule: length;
  rightrule: length;
  titlerule: length;
  % boxrule
  arc: length;
  % outer arc, arc is singular
  % righttitle etc
  % toggle-left-and-right
  % sharp corners, rounded corners
  % opacity opacityframe etc.
  % before title, after title
  % overlay
  % flush left etc.
  boxtitle-xshift: length;
  boxtitle-yshift: length;
|)
type colorbox-option = colorbox-option-data -> colorbox-option-data

let make-frame option =
  if Length.(option#arc == 0pt) then
    normal-frame (|
      color = option#colframe;
      top-rule = option#toprule;
      bottom-rule = option#bottomrule;
      right-rule = option#rightrule;
      left-rule = option#leftrule;
    |)
  else
    circle-frame (|
      color = option#colframe;
      top-rule = option#toprule;
      bottom-rule = option#bottomrule;
      right-rule = option#rightrule;
      left-rule = option#leftrule;
      radius = option#arc;
    |)

let make-title option =
  if option#title-type == title-type-normal then
    normal-title (|
      top = option#toptitle +' option#boxsep;
      bottom = option#bottomtitle +' option#boxsep;
      left = option#lefttitle +' option#boxsep;
      right = option#righttitle +' option#boxsep;
      fonttitle = option#fonttitle;
      color = option#coltitle;
      color-back = if option#title-filled then option#colbacktitle else option#colframe;
      color-frame = option#colframe;
      bottom-rule = option#titlerule;
    |)
  else
    let frame = make-frame option in
    let shift-x = 
      if option#title-type == 2 then (fun _ _ -> option#boxtitle-xshift) % left
      else if option#title-type == 3 then (fun width w -> ((width -' w) *' 0.5) +' option#boxtitle-xshift)% center
      else (fun width w -> (width -' w +' option#boxtitle-xshift)) % right
    in
    boxed-title (|
      frame = frame;
      top = option#toptitle +' option#boxsep;
      bottom = option#bottomtitle +' option#boxsep;
      left = option#lefttitle +' option#boxsep;
      right = option#righttitle +' option#boxsep;
      fonttitle = option#fonttitle;
      color = option#coltitle;
      color-back = option#colbacktitle;
      % height depth
      shift-x = shift-x;
      % 枠のwidth objのwidth 
      shift-y = (fun _ _ -> option#boxtitle-yshift);
    |)

let make-config option= (|
  left-skip = option#left-skip;
  right-skip = option#right-skip;
  before-skip = option#before-skip;
  after-skip = option#after-skip;
  left = option#left;
  right = option#right;
  top = option#top;
  bottom = option#bottom;
  color-back = option#colback;
|)

let left l t = (|t with left = l|)
let right l t = (|t with right = l|)
let top l t = (|t with top = l|)
let bottom l t = (|t with bottom = l|)
let toptitle l t = (|t with toptitle = l|)
let bottomtitle l t = (|t with bottomtitle = l|)
let boxsep l t = (|t with boxsep = l|)
let coltext c t = (|t with coltext = c|)
let colframe c t = (|t with colframe = c|)
let colback c t = (|t with colback = c|)
let fonttitle s t = (|t with fonttitle = s|)
let coltitle c t = (|t with coltitle = c|)
let colbacktitle c t = (|t with colbacktitle = c|)
let title-filled b t = (|t with title-filled = b|)
let before-skip l t = (|t with before-skip = l|)
let after-skip l t = (|t with after-skip = l|)
let left-skip l t = (|t with left-skip = l|)
let right-skip l t = (|t with right-skip = l|)
let toprule l t = (|t with toprule = l|)
let bottomrule l t = (|t with bottomrule = l|)
let leftrule l t = (|t with leftrule = l|)
let rightrule l t = (|t with rightrule = l|)
let titlerule l t = (|t with titlerule = l|)
let boxrule l t = (|t with leftrule = l;rightrule = l;toprule = l;bottomrule = l|)
let arc l t = (|t with arc = l;|)
let attach-boxed-title-on-top-left b t = (|t with title-type = title-type-boxed-top-left|)
let attach-boxed-title-on-top-center b t = (|t with title-type = title-type-boxed-top-center|)
let attach-boxed-title-on-top-right b t = (|t with title-type = title-type-boxed-top-right|)
let boxtitle-xshift l t = (|t with boxtitle-xshift = l|)
let boxtitle-yshift l t = (|t with boxtitle-yshift = l|)

let-block ctx +colorbox ?:optopt ?:title-txt text =
  let default-option = (|
    left = 4mm;
    right = 4mm;
    bottom = 2mm;
    top = 2mm;
    toptitle = 0mm;
    bottomtitle = 0mm;
    lefttitle = 0mm;
    righttitle = 0mm;
    boxsep = 1mm;
    coltext = Color.black;
    colframe = (Color.gray 0.25);
    colback = (Color.gray 0.95);
    fonttitle = [];
    coltitle = Color.white;
    colbacktitle = (Color.gray 0.5);
    title-filled = false;
    title-type = title-type-normal;
    before-skip = 0pt;
    after-skip = 0pt;
    left-skip = 0pt;
    right-skip = 0pt;
    toprule = 0.5mm;
    bottomrule= 0.5mm;
    leftrule = 0.5mm;
    rightrule = 0.5mm;
    titlerule = 0.5mm;
    arc = 1mm;
    boxtitle-xshift = 0pt;
    boxtitle-yshift = 0pt;
  |) in
  
  let opt = 
    match optopt with 
    | Some(o) -> List.fold-left (fun t f -> (f t)) default-option o
    | None -> default-option
  in
  let config = make-config opt in
  let frame = make-frame opt in
  let title = make-title opt in
  match title-txt with
  | Some(t) -> colorbox-scheme config frame title ctx ?:t text
  | None -> colorbox-scheme config frame title ctx text
end

