@require: list
@require: color
@require: base/list-ext
@require: base/length
@require: base/float
@require: fss/style
@require: fss/fss

type colorbox-line-config = (|
  color: color;
  thickness: length;
|)

type colorbox-corner-path = (length*length) -> (
  (length*length)*% start
  (length*length)*% end
  (pre-path -> pre-path) * % 反時計回り
  (graphics list)
)

type colorbox-config = (|
  left-skip: length;
  right-skip: length;
  before-skip: length;
  after-skip: length;
  left: length;
  right: length;
  top: length;
  bottom: length;
  color-back: color;
|)

type colorbox-frame = (|
  left-top: colorbox-config -> (length*length) -> ((length*length)*(length*length)*(pre-path -> pre-path)*(graphics list));
  right-top: colorbox-config -> (length*length) -> ((length*length)*(length*length)*(pre-path -> pre-path)*(graphics list));
  left-bottom: colorbox-config -> (length*length) -> ((length*length)*(length*length)*(pre-path -> pre-path)*(graphics list));
  right-bottom: colorbox-config -> (length*length) -> ((length*length)*(length*length)*(pre-path -> pre-path)*(graphics list));
  top-rule: colorbox-config -> (length*length) -> (length*length) -> ((pre-path -> pre-path)*(graphics list));
  bottom-rule: colorbox-config -> (length*length) -> (length*length) -> ((pre-path -> pre-path)*(graphics list));
  left-rule: colorbox-config -> (length*length) -> (length*length) -> ((pre-path -> pre-path)*(graphics list));
  right-rule: colorbox-config -> (length*length) -> (length*length) -> ((pre-path -> pre-path)*(graphics list));
|)

type colorbox-title = (|
  make-box: colorbox-config -> colorbox-frame -> context -> inline-text -> (inline-boxes * int list);
  graphics: colorbox-config -> colorbox-frame -> context -> int -> (length*length) -> length -> length -> length -> inline-boxes -> (graphics list);
  shifts: colorbox-config -> colorbox-frame -> context -> inline-boxes -> (length * length * length * length); % 枠自身のずらし，本文のずらし，下方向枠ずらし，それ以降のずらし，表示場所
|)

module Colorbox : sig
  val colorbox-scheme: colorbox-config -> colorbox-frame -> 'a -> context -> inline-text ?-> block-text -> block-boxes
    constraint 'a :: (|
      title: colorbox-title;
      overlay: (colorbox-config -> colorbox-frame -> context -> int -> (length*length) -> length -> length -> length -> (graphics list)) list;
      shadow: (colorbox-config -> colorbox-frame -> context -> int -> (length*length) -> length -> length -> length -> (graphics list)) list;
    |)
  val make-frame: colorbox-config -> colorbox-frame -> int -> (length*length) -> length -> length -> length -> (path * graphics list)

  val circle-frame: 'a -> colorbox-frame
    constraint 'a :: (|
      color: color;
      top-rule: length;
      bottom-rule: length;
      right-rule: length;
      left-rule: length;
      left-top-radius: length;
      right-top-radius: length;
      left-bottom-radius: length;
      right-bottom-radius: length;
    |)
  val normal-title: 'a -> colorbox-title
    constraint 'a :: (|
      top: length;
      bottom: length;
      left: length;
      right: length;
      fonttitle: style list;
      color: color;
      color-back: color;
      bottom-rule: length;
      color-frame: color;
      at-bottom: bool;
    |)
  val boxed-title: 'a -> colorbox-title
    constraint 'a :: (|
      frame: colorbox-frame;
      top: length;
      bottom: length;
      left: length;
      right: length;
      fonttitle: style list;
      color: color;
      color-back: color;
      % height depth
      shift-x: length -> length -> length;
      % 枠のwidth objのwidth 
      shift-y: length -> length -> length;
      at-bottom: bool;
    |)
  type colorbox-option
  val +colorbox : [colorbox-option list; inline-text?; block-text] block-cmd
  val left: length -> colorbox-option
  val right: length -> colorbox-option
  val top: length -> colorbox-option
  val bottom: length -> colorbox-option
  val toptitle: length -> colorbox-option
  val bottomtitle: length -> colorbox-option
  val lefttitle: length -> colorbox-option
  val righttitle: length -> colorbox-option
  val boxsep: length -> colorbox-option
  val coltext: color -> colorbox-option
  val colframe: color -> colorbox-option
  val colback: color -> colorbox-option
  val fonttitle: style list -> colorbox-option
  val coltitle: color -> colorbox-option
  val colbacktitle: color -> colorbox-option
  val title-filled: bool -> colorbox-option
  val before-skip: length -> colorbox-option
  val after-skip: length -> colorbox-option
  val left-skip: length -> colorbox-option
  val right-skip: length -> colorbox-option
  val toprule: length -> colorbox-option
  val bottomrule: length -> colorbox-option
  val leftrule: length -> colorbox-option
  val rightrule: length -> colorbox-option
  val titlerule: length -> colorbox-option
  val boxrule: length -> colorbox-option
  val arc: length -> colorbox-option
  val sharrp-corners-northwest: colorbox-option
  val sharrp-corners-northeast: colorbox-option
  val sharrp-corners-southwest: colorbox-option
  val sharrp-corners-southeast: colorbox-option
  val sharrp-corners-north: colorbox-option
  val sharrp-corners-south: colorbox-option
  val sharrp-corners-east: colorbox-option
  val sharrp-corners-west: colorbox-option
  val sharrp-corners-downhill: colorbox-option
  val sharrp-corners-uphill: colorbox-option
  val sharrp-corners-all: colorbox-option
  val attach-boxed-title-on-top-left: colorbox-option
  val attach-boxed-title-on-top-center: colorbox-option
  val attach-boxed-title-on-top-right: colorbox-option
  val attach-boxed-title-on-bottom-left: colorbox-option
  val attach-boxed-title-on-bottom-center: colorbox-option
  val attach-boxed-title-on-bottom-right: colorbox-option
  val flip-title: colorbox-option
  val boxtitle-xshift: length -> colorbox-option
  val boxtitle-yshift: length -> colorbox-option
  val boxed-title-colframe: color -> colorbox-option
  val shadow: length -> length -> length -> 'a -> colorbox-option
    constraint 'a :: (|
      color: color;
    |)
  val drop-shadow: colorbox-option
  val drop-midday-shadow: colorbox-option
  val drop-shadow-southeast: colorbox-option
  val drop-shadow-south: colorbox-option
  val drop-shadow-southwest: colorbox-option
  val drop-shadow-west: colorbox-option
  val drop-shadow-northwest: colorbox-option
  val drop-shadow-north: colorbox-option
  val drop-shadow-northeast: colorbox-option
  val drop-shadow-east: colorbox-option
  val watermark-text: inline-text -> colorbox-option
  val watermark-text-on-broken: inline-text -> colorbox-option
  val watermark-text-on-unbroken: inline-text -> colorbox-option
  val watermark-text-on-first: inline-text -> colorbox-option
  val watermark-text-on-middle: inline-text -> colorbox-option
  val watermark-text-on-last: inline-text -> colorbox-option
  val watermark-text-on-unbroken-and-first: inline-text -> colorbox-option
  val watermark-text-on-middle-and-last: inline-text -> colorbox-option
  val watermark-text-on-first-and-middle: inline-text -> colorbox-option
  val watermark-zoom: float -> colorbox-option
  val watermark-color: color -> colorbox-option

end = struct

% for debug
let len-to-str l = Float.to-string (Length.to-float l) ^ `pt`
let draw-point c (x,y) = fill c (start-path (x -' 2pt,y -' 2pt) |> line-to (x +' 2pt,y -' 2pt) |> line-to (x +' 2pt,y +' 2pt) |> line-to (x -' 2pt,y +' 2pt) |> close-with-line)

let make-frame config frame index (x,y) width height depth =
  let top-path = 
    let (lt-r,lt-b,lt-path,lt-gr) = frame#left-top config (x,y +' height) in
    let (rt-b,rt-l,rt-path,rt-gr) = frame#right-top config (x +' width,y +' height) in
    let (t-path,t-gr) = frame#top-rule config rt-l lt-r in
    (rt-b,lt-b,(fun p -> p |> rt-path |>  t-path |> lt-path),List.concat [rt-gr;t-gr;lt-gr])
  in
  let bottom-path =
    let (lb-t,lb-r,lb-path,lb-gr) = frame#left-bottom config (x,y -' depth) in
    let (rb-l,rb-t,rb-path,rb-gr) = frame#right-bottom config (x +' width,y -' depth) in
    let (b-path,b-gr) = frame#bottom-rule config lb-r rb-l in
    (lb-t,rb-t,(fun p -> p |> lb-path |> b-path |> rb-path),List.concat [lb-gr;b-gr;rb-gr])
  in
  if index == 0 then % 口
    let (t-from,t-to,t-path,t-gr) = top-path in
    let (b-from,b-to,b-path,b-gr) = bottom-path in
    let (l-path,l-gr) = frame#left-rule config t-to b-from in
    let (r-path,r-gr) = frame#right-rule config b-to t-from in
    (start-path t-from |> t-path |> l-path |> b-path |> r-path |> close-with-line,List.concat [t-gr;l-gr;b-gr;r-gr])
  else if index == 1 then % 冂
    let (t-from,t-to,t-path,t-gr) = top-path in
    let startpt = (x +' width,y -' depth) in
    let endpt = (x,y -' depth) in
    let (r-path,r-gr) = frame#right-rule config startpt t-from in
    let (l-path,l-gr) = frame#left-rule config t-to endpt in
    (start-path startpt |> r-path |> t-path |> l-path |> close-with-line,List.concat [r-gr;t-gr;l-gr])
  else if index == 2 then % ｜｜
    let startpt = (x +' width,y -' depth) in
    let endpt = (x,y -' depth) in
    let (r-path,r-gr) = frame#right-rule config startpt (x +' width,y +' height) in
    let (l-path,l-gr) = frame#left-rule config (x,y +' height) endpt in
    (start-path startpt |> r-path |> line-to (x,y +' height) |> l-path |> close-with-line,List.append r-gr l-gr)
  else if index == 3 then % 凵
    let startpt = (x,y +' height) in
    let endpt = (x +' width,y +' height) in
    let (b-from,b-to,b-path,b-gr) = bottom-path in
    let (r-path,r-gr) = frame#right-rule config b-to endpt in
    let (l-path,l-gr) = frame#left-rule config startpt b-from in
    (start-path startpt |> l-path |> b-path |> r-path |> close-with-line,List.concat [l-gr;b-gr;r-gr])
  else 
    let () = abort-with-message (#`wrong index `# ^ (arabic index) ^ #` in make-frame`#) in
    (start-path (0pt,0pt) |> terminate-path,[])

let colorbox-scheme config frame config2 ctx ?:title-txt txt =
  let (is-title-available,title-ib,frame-shift,body-shift,bottom-frame-shift,bottom-body-shift,position) =
    match title-txt with
    | Some(t) -> 
      let (ib,pos) = config2#title#make-box config frame ctx t in
      let (fs,bs,bfs,bbs) = config2#title#shifts config frame ctx ib in
      (true,ib,fs,bs,bfs,bbs,pos)
    | None -> (false,inline-nil,0pt,0pt,0pt,0pt,[])
  in
  let paddings = (config#left,config#right,config#top,config#bottom) in
  let exists a b = 
    match List.find (fun x -> x == a) b with
    | None -> false
    | Some(_) -> true
  in
  let shifted-point index (x,y) width height depth = (
    (x,y),width,
    height +' (if index == 0 || index == 1 then frame-shift else 0pt),
    depth +' (if index == 0 || index == 3 then bottom-body-shift else 0pt)
  ) in
  let deco index pt width height depth = 
    let (p,w,h,d) = shifted-point index pt width height depth in
    let (path,gr) = make-frame config frame index p w h d in
    let back-gr = [fill config#color-back path] in
    let shadow-gr =  List.fold-left (fun g o -> List.append g (o config frame ctx index p w h d)) [] config2#shadow in
    let overlay-gr = List.fold-left (fun g o -> List.append g (o config frame ctx index p w h d)) [] config2#overlay in
    let title-gr = 
      if is-title-available && (exists index position) then
        config2#title#graphics config frame ctx index pt width height depth title-ib
      else [] in
    List.concat [shadow-gr;back-gr;gr;title-gr;overlay-gr]
  in

  let large-skip = 10000pt in
  let out-block c =
    block-frame-breakable c
      paddings
      (deco 0,deco 1,deco 2,deco 3)
      (fun inctx -> (
        let empty-inline-bb = inline-graphics 10pt 10pt 10pt (fun pt -> []) in
        let dummy-bb = line-break false false (set-paragraph-margin 0pt 0pt inctx) (empty-inline-bb ++ inline-fil) in
        let dummy-len = get-natural-length dummy-bb in
        (
          if Length.((frame-shift +' body-shift) == 0pt) then block-nil
          else
            (block-skip (0pt -' frame-shift -' body-shift -' large-skip -' dummy-len)) +++
            (line-break false false (set-paragraph-margin 0pt large-skip inctx) (empty-inline-bb ++ inline-fil))
        ) +++
        (read-block inctx txt)
        +++ (
          if Length.(bottom-frame-shift +' bottom-body-shift == 0pt) then block-nil
          else
            (line-break false false (set-paragraph-margin large-skip 0pt inctx) (empty-inline-bb ++ inline-fil)) +++
            (block-skip (0pt -' bottom-frame-shift -' bottom-body-shift -' large-skip -' (dummy-len *' 2.0)))
             +++
            (line-break false false (set-paragraph-margin 0pt 0pt inctx) (empty-inline-bb ++ inline-fil))
        )
      ))
  in
  if
    Length.(config#left-skip == 0pt) &&
    Length.(config#right-skip == 0pt) &&
    Length.(config#before-skip == 0pt) &&
    Length.(config#after-skip == 0pt)
  then out-block ctx
  else
    let null-deco _ _ _ _ = [] in
    let null-decos = (null-deco,null-deco,null-deco,null-deco) in
    block-frame-breakable ctx (config#left-skip,config#right-skip,config#before-skip,config#after-skip) null-decos out-block

let normal-rule thickness color cfg from to =
  (
    (line-to to),
    if thickness >' 0pt then
      [stroke thickness color (start-path from |> line-to to |> terminate-path)]
    else []
  )

let get-stroke-frame-corner-transform from-rule to-rule angle (from-x,from-y) (to-x,to-y) =
  let (c,s) = (cos (angle *. 3.14159 /. 180.0),sin (angle *. 3.14159 /. 180.0)) in
  % 原点シフト→-angle回転→(a,b)相似変換→angle変換→(原点シフト)^{-1}
  % (m11,m_12,m_21,m_22,shift-x,shift-y)，シフトは行列かけた後
  let make-matrix a b = (
    (1.0 -. a)*.c*.c +. (1.0 -. b)*.s*.s,
    (b -. a)*.s*.c,
    (b -. a)*.s*.c,
    (1.0 -. a)*.s*.s +. (1.0 -. b)*.c*.c,
    to-x*'a*.c*.c +' from-x*'b*.s*.s +' to-y*'a*.c*.s -' from-y*'b*.c*.s,
    to-x*'a*.c*.s -' from-x*'b*.c*.s +' to-y*'a*.s*.s +' from-y*'b*.c*.c
  ) in
  let abs l = if Length.(l < 0pt) then (0pt -' l) else l in
  let from-dist = abs ((from-x -' to-x) *' c +' (from-y -' to-y) *' s) in
  let to-dist = abs ((from-x -' to-x) *' s -' (from-y -' to-y) *' c) in
  let from-scale = (from-rule /' from-dist) *. 0.5 in
  let to-scale = (to-rule /' to-dist) *. 0.5 in
  let (o11,o12,o21,o22,o-shift-x,o-shift-y) = make-matrix (0.0 -. from-scale) (0.0 -. to-scale) in
  let (i11,i12,i21,i22,i-shift-x,i-shift-y) = make-matrix from-scale to-scale in
  let trans-i (xx,yy) = (xx *' i11 +' yy  *' i12 +' i-shift-x,xx *' i21 +' yy *' i22 +' i-shift-y) in
  let trans-o (xx,yy) = (xx *' o11 +' yy  *' o12 +' o-shift-x,xx *' o21 +' yy *' o22 +' o-shift-y) in
  (trans-i,trans-o)

let circle-frame-corner-path angle radius (x,y) =
  let (c,s) = (cos (angle *. 3.14159 /. 180.0),sin (angle *. 3.14159 /. 180.0)) in
  let (stx,sty) = (x +' (radius *' s),y -' (radius *' c)) in
  let (enx,eny) = (x -' (radius *' c),y -' (radius *' s)) in
  let ctrl = radius *' 0.55228 in
  (
    (stx,sty),
    (stx -' (ctrl *' s),sty +' (ctrl *' c)),
    (enx +' (ctrl *' c),eny +' (ctrl *' s)),
    (enx,eny)
  )

let circle-frame-corner-graphics-aux from-rule to-rule radius color angle config (x,y) =
  let (from,ctrl1,ctrl2,to) = circle-frame-corner-path angle radius (x,y) in
  let path = bezier-to ctrl1 ctrl2 to in
  let gr =
    if Length.(from-rule == 0pt) && Length.(to-rule == 0pt) then []
    else
      if Length.(from-rule == to-rule) then 
        [stroke from-rule color (start-path from |>  path |> terminate-path)]
      else 
        let (trans-i,trans-o) = get-stroke-frame-corner-transform from-rule to-rule angle from to in
        let (from-i,ctrl1-i,ctrl2-i,to-i) = (trans-i from,trans-i ctrl1,trans-i ctrl2,trans-i to) in
        let (from-o,ctrl1-o,ctrl2-o,to-o) = (trans-o from,trans-o ctrl1,trans-o ctrl2,trans-o to) in
        [fill color (start-path from-o |> bezier-to ctrl1-o ctrl2-o to-o |> line-to to-i |> bezier-to ctrl2-i ctrl1-i from-i |> close-with-line)]
  in
  (from,to,path,gr)

let circle-frame-corner-graphics from-rule to-rule radius color angle config (x,y) =
  if Length.(radius == 0pt) then
    let (c,s) = (cos (angle *. 3.14159 /. 180.0),sin (angle *. 3.14159 /. 180.0)) in
    let (haba-x,haba-y) = ((from-rule *' c +' to-rule *' s) *' 0.5,(from-rule *' s +' to-rule *' c) *' 0.5) in
    let path = start-path (x +' haba-x,y -' haba-y)
        |> line-to (x +' haba-x,y +' haba-y) |> line-to (x -' haba-x,y +' haba-y)
        |> line-to (x -' haba-x,y -' haba-y) |> close-with-line
    in
    ((x,y),(x,y),(fun p -> p),[fill color  path])
  else circle-frame-corner-graphics-aux from-rule to-rule radius color angle config (x,y)

let circle-frame fc = (|
  right-top = circle-frame-corner-graphics fc#right-rule fc#top-rule fc#right-top-radius fc#color 0.0;
  left-top = circle-frame-corner-graphics fc#top-rule fc#top-rule fc#left-top-radius fc#color 90.0;
  left-bottom = circle-frame-corner-graphics fc#left-rule fc#bottom-rule fc#left-bottom-radius fc#color 180.0;
  right-bottom = circle-frame-corner-graphics fc#bottom-rule fc#right-rule fc#right-bottom-radius fc#color 270.0;
  top-rule = normal-rule fc#top-rule fc#color;
  bottom-rule = normal-rule fc#bottom-rule fc#color;
  left-rule = normal-rule fc#left-rule fc#color;
  right-rule = normal-rule fc#right-rule fc#color;
|)

let normal-title-make-box title-config config frame ctx title-it =
  let b = read-inline (ctx |> set-text-color title-config#color) {\font-style (title-config#fonttitle) {#title-it;}} in
  (b,if title-config#at-bottom then [0;3] else [0;1])

let normal-title-graphicsbb title-config config ctx title-ib =
  let null-deco _ _ _ _ = [] in
  let null-decos = (null-deco,null-deco,null-deco,null-deco) in
  block-frame-breakable ctx (
    title-config#left,title-config#right,
    title-config#top,title-config#bottom
  ) null-decos (fun inctx -> (
    line-break false false inctx (title-ib ++ inline-fil)
  ))

let normal-title-shifts title-config config frame ctx title-ib = 
  let title-height = get-natural-length (normal-title-graphicsbb title-config config ctx title-ib) in
  if title-config#at-bottom then (0pt,0pt,0pt -' title-height,0pt)
  else (0pt,0pt -' title-height,0pt,0pt)

let normal-title-graphics title-config config frame ctx index (x,y) width height depth title-ib =
  let title-ib-from-bb = 
    embed-block-breakable ctx (normal-title-graphicsbb title-config config ctx title-ib)
  in
  let (title-w,title-h,title-d) = get-natural-metrics title-ib-from-bb in
  if title-config#at-bottom then
    let (lb-t,lb-r,lb-path,lb-gr) = frame#left-bottom config (x,y -' depth) in
    let (rb-l,rb-t,rb-path,rb-gr) = frame#right-bottom config (x +' width,y -' depth) in
    let (b-path,b-gr) = frame#bottom-rule config lb-r rb-l in
    let (l-path,l-gr) = frame#left-rule config (x,y -' depth  +' title-h +' title-d) lb-t in
    let (r-path,r-gr) = frame#right-rule config rb-t (x +' width,y -' depth  +' title-h +' title-d) in
    let start-pt = (x,y -' depth +' title-h +' title-d) in
    let gr =
      if title-config#bottom-rule >' 0pt then
        [stroke title-config#bottom-rule title-config#color-frame (
          start-path start-pt |> line-to (x +' width,y -' depth +' title-h +' title-d) |> terminate-path
        )]
       else []
    in
    List.concat [
      [fill title-config#color-back (start-path start-pt |> l-path |> lb-path |> b-path |> rb-path |> r-path |> close-with-line)];
      gr;
      l-gr;lb-gr;b-gr;rb-gr;r-gr;
      [draw-text (x,y -' depth +' title-d) title-ib-from-bb];
    ]
  else
    let (lt-r,lt-b,lt-path,lt-gr) = frame#left-top config (x,y +' height) in
    let (rt-b,rt-l,rt-path,rt-gr) = frame#right-top config (x +' width,y +' height) in
    let (t-path,t-gr) = frame#top-rule config rt-l lt-r in
    let (r-path,r-gr) = frame#right-rule config (x +' width,y +' height -' (title-h +' title-d)) rt-b in
    let (l-path,l-gr) = frame#left-rule config lt-b (x,y +' height -' (title-h +' title-d)) in
    let start-pt = (x +' width,y +' height -' (title-h +' title-d)) in
    let gr = 
      if title-config#bottom-rule >' 0pt then
        [stroke title-config#bottom-rule title-config#color-frame (
          start-path (x,y +' height -' (title-h +' title-d)) |> line-to (x +' width,y +' height -' (title-h +' title-d)) |> terminate-path
        )]
      else []
    in
    List.concat [
      [fill title-config#color-back (start-path start-pt |> r-path |> rt-path |> t-path |> lt-path |> l-path |> close-with-line)];
      gr;
      r-gr;rt-gr;t-gr;lt-gr;l-gr;
      [draw-text (x,y +' height -' title-h) title-ib-from-bb];
    ]

let normal-title title-config = (|
  make-box = normal-title-make-box title-config;
  graphics = normal-title-graphics title-config;
  shifts = normal-title-shifts title-config;
|)

let boxed-title-graphics-title-b title-config config ctx title-ib =
  let paddings = (
    title-config#left,
    title-config#right,
    title-config#top,
    title-config#bottom
  ) in
  let deco (x,y) width height depth =
    let (rt-b,rt-l,rt-path,rt-gr) = title-config#frame#right-top config (x +' width,y +' height) in
    let (lt-r,lt-b,lt-path,lt-gr) = title-config#frame#left-top config (x,y +' height) in
    let (lb-t,lb-r,lb-path,lb-gr) = title-config#frame#left-bottom config (x,y -' depth) in
    let (rb-l,rb-t,rb-path,rb-gr) = title-config#frame#right-bottom config (x +' width,y -' depth) in
    let (t-path,t-gr) = title-config#frame#top-rule config rt-l lt-r in
    let (l-path,l-gr) = title-config#frame#left-rule config lt-b lb-t in
    let (b-path,b-gr) = title-config#frame#bottom-rule config lb-r rb-l in
    let (r-path,r-gr) = title-config#frame#right-rule config rb-t rt-b in
    let path = start-path rt-b
      |> rt-path |> t-path |> lt-path |> l-path |> lb-path |> b-path |> rb-path |> r-path |> terminate-path
    in
    List.concat [
      [fill title-config#color-back path];
      rt-gr;t-gr;lt-gr;l-gr;lb-gr;b-gr;rb-gr;r-gr
    ]
  in
  inline-frame-outer paddings deco title-ib

let boxed-title-shifts title-config config frame ctx title-b =
  let (w,h,d) = get-natural-metrics (boxed-title-graphics-title-b title-config config ctx title-b) in
  let sy = title-config#shift-y h d in
%  let () = display-message (`shifts, height = ` ^ (len-to-str h) ^ `, depth = ` ^ (len-to-str d) ^ `, sy = ` ^ (len-to-str sy)) in
  if title-config#at-bottom then
    if sy >' 0pt then
      if h +' d >' sy then (0pt,0pt,0pt -' sy,sy -' h -' d)
      else (0pt,0pt,0pt -' sy,0pt)
    else (0pt,0pt,0pt,sy -' h -' d)
  else
    if h +' d +' sy >' 0pt then (0pt -' h -' d -' sy,sy,0pt,0pt)
    else (0pt,sy,0pt,0pt)
  

let boxed-title-graphics title-config config frame ctx index (x,y) width height depth title-ib =
  let title-framed-ib = boxed-title-graphics-title-b title-config config ctx title-ib in
  let (w,h,d) = get-natural-metrics title-framed-ib in
%  let () = display-message (`height = ` ^ (len-to-str h) ^ `, y - depth = ` ^ (len-to-str (y -' depth))) in
  let sx = title-config#shift-x width w in
  let sy = title-config#shift-y h d in
  let title-point =
    if title-config#at-bottom then
      if h +' d >' sy then (x +' sx,y -' depth +' d)
      else (x +' sx,y -' depth +' sy -' h)
    else
      let new-sy =
        if h +' d +' sy >' 0pt then 0pt
        else h +' d +' sy
      in
      (x +' sx,y +' height -' h +' new-sy)
  in
  [
    draw-text title-point title-framed-ib;
  ]

let boxed-title title-config = (|
  make-box = normal-title-make-box title-config;
  graphics = boxed-title-graphics title-config;
  shifts = boxed-title-shifts title-config;
|)

let title-type-normal = 1
let title-type-normal-flip = 2
let title-type-boxed-top-left = 3
let title-type-boxed-top-center = 4
let title-type-boxed-top-right = 5
let title-type-boxed-bottom-left = 6
let title-type-boxed-bottom-center = 7
let title-type-boxed-bottom-right = 8

type colorbox-option-data = (|
  left: length;
  right: length;
  bottom: length;
  top: length;
  toptitle: length;
  bottomtitle: length;
  lefttitle: length;
  righttitle: length;
  boxsep: length;
  coltext: color;
  colframe: color;
  colback: color;
  fonttitle: style list;
  coltitle: color;
  colbacktitle: color;
  title-filled: bool;
  title-type: int;
  before-skip: length;
  after-skip: length;
  left-skip: length;
  right-skip: length;
  toprule: length;
  bottomrule: length;
  leftrule: length;
  rightrule: length;
  titlerule: length;
  arc: (|left-top: length;right-top: length;left-bottom: length;right-bottom: length;|);
  % outer arc, arc is singular
  % toggle-left-and-right
  % sharp corners, rounded corners
  % opacity opacityframe etc.
  % before title, after title
  % overlay
  % flush left etc.
  boxtitle-xshift: length;
  boxtitle-yshift: length;
  boxed-title-colframe: color option;
  shadow: colorbox-config -> colorbox-frame -> context -> int -> (length*length) -> length -> length -> length -> (graphics list);
  watermark: (|unbroken: inline-text;first: inline-text;middle: inline-text;last: inline-text;|);
  watermark-zoom: float;
  watermark-color: color;
|)
type colorbox-option = colorbox-option-data -> colorbox-option-data

let make-colorbox-frame color option =
  circle-frame (|
    color = color;
    top-rule = option#toprule;
    bottom-rule = option#bottomrule;
    right-rule = option#rightrule;
    left-rule = option#leftrule;
    right-top-radius = option#arc#right-top;
    left-top-radius = option#arc#left-top;
    left-bottom-radius = option#arc#left-bottom;
    right-bottom-radius = option#arc#right-bottom;
  |)

let make-title option =
  if option#title-type == title-type-normal || option#title-type == title-type-normal-flip then
    normal-title (|
      top = option#toptitle +' option#boxsep;
      bottom = option#bottomtitle +' option#boxsep;
      left = option#lefttitle +' option#boxsep;
      right = option#righttitle +' option#boxsep;
      fonttitle = option#fonttitle;
      color = option#coltitle;
      color-back = if option#title-filled then option#colbacktitle else option#colframe;
      color-frame = option#colframe;
      bottom-rule = option#titlerule;
      at-bottom = (option#title-type == title-type-normal-flip);
    |)
  else
    let frame =
      make-colorbox-frame (match option#boxed-title-colframe with |None -> option#colframe |Some(c) ->c) option in
    let shift-x = 
      if option#title-type == title-type-boxed-top-left || option#title-type == title-type-boxed-bottom-left then
        (fun _ _ -> option#boxtitle-xshift) % left
      else if option#title-type == title-type-boxed-top-center || option#title-type == title-type-boxed-bottom-center then
        (fun width w -> ((width -' w) *' 0.5) +' option#boxtitle-xshift) % center
      else
        (fun width w -> (width -' w +' option#boxtitle-xshift)) % right
    in
    let at-bottom = (
      option#title-type == title-type-boxed-bottom-left ||
      option#title-type == title-type-boxed-bottom-center ||
      option#title-type == title-type-boxed-bottom-right
    ) in
    boxed-title (|
      frame = frame;
      top = option#toptitle +' option#boxsep;
      bottom = option#bottomtitle +' option#boxsep;
      left = option#lefttitle +' option#boxsep;
      right = option#righttitle +' option#boxsep;
      fonttitle = option#fonttitle;
      color = option#coltitle;
      color-back = option#colbacktitle;
      % height depth
      shift-x = shift-x;
      % 枠のwidth objのwidth 
      shift-y = (fun _ _ -> (option#boxtitle-yshift +' (if at-bottom then (0pt -' option#bottomrule) else option#bottomrule)));
      at-bottom = at-bottom;
    |)

let make-config option= (|
  left-skip = option#left-skip;
  right-skip = option#right-skip;
  before-skip = option#before-skip;
  after-skip = option#after-skip;
  left = option#left;
  right = option#right;
  top = option#top;
  bottom = option#bottom;
  color-back = option#colback;
|)

let watermark-graphic zoom color txt colbox-config frame ctx index (x,y) width height depth =
  let ib = read-inline (set-text-color color ctx) txt in
  let (w,h,d) = get-natural-metrics ib in
  if Length.(w == 0pt || (h == 0pt && d == 0pt)) then []
  else
    let ratiox = (width *' zoom) /' w in
    let ratioy = ((height +' depth) *' zoom) /' (h +' d) in
    let ratio = if Float.(ratiox < ratioy) then ratiox else ratioy in
    let txt-x = x +' (width -' (w *' ratio)) *' 0.5 in
    let txt-y = y +' ((height -' depth) -' ((h -' d) *' ratio)) *' 0.5 in
    [
      shift-graphics (txt-x,txt-y) (linear-transform-graphics ratio 0.0 0.0 ratio (draw-text (0pt,0pt) ib))
    ]

let shadow-graphic config colbox-config frame ctx index (x,y) width height depth =
  let (path,_) = make-frame colbox-config frame index 
    (x +' config#xshift +' config#offset,y +' config#yshift)
    (width -' config#offset *' 2.0) (height -' config#offset) (depth -' config#offset) in
  [fill config#color path]

let left l t = (|t with left = l|)
let right l t = (|t with right = l|)
let top l t = (|t with top = l|)
let bottom l t = (|t with bottom = l|)
let toptitle l t = (|t with toptitle = l|)
let bottomtitle l t = (|t with bottomtitle = l|)
let lefttitle l t = (|t with lefttitle = l|)
let righttitle l t = (|t with righttitle = l|)
let boxsep l t = (|t with boxsep = l|)
let coltext c t = (|t with coltext = c|)
let colframe c t = (|t with colframe = c|)
let colback c t = (|t with colback = c|)
let fonttitle s t = (|t with fonttitle = s|)
let coltitle c t = (|t with coltitle = c|)
let colbacktitle c t = (|t with colbacktitle = c|)
let title-filled b t = (|t with title-filled = b|)
let before-skip l t = (|t with before-skip = l|)
let after-skip l t = (|t with after-skip = l|)
let left-skip l t = (|t with left-skip = l|)
let right-skip l t = (|t with right-skip = l|)
let toprule l t = (|t with toprule = l|)
let bottomrule l t = (|t with bottomrule = l|)
let leftrule l t = (|t with leftrule = l|)
let rightrule l t = (|t with rightrule = l|)
let titlerule l t = (|t with titlerule = l|)
let boxrule l t = (|t with leftrule = l;rightrule = l;toprule = l;bottomrule = l|)
let arc l t = (|t with arc = (|left-top = l;right-top = l;left-bottom = l;right-bottom = l;|);|)
let sharrp-corners-northwest t = (|t with arc = (|t#arc with left-top = 0pt;|);|)
let sharrp-corners-northeast t = (|t with arc = (|t#arc with right-top = 0pt;|);|)
let sharrp-corners-southwest t = (|t with arc = (|t#arc with left-bottom = 0pt;|);|)
let sharrp-corners-southeast t = (|t with arc = (|t#arc with right-bottom = 0pt;|);|)
let sharrp-corners-north t = (|t with arc = (|t#arc with left-top = 0pt;right-top = 0pt;|);|)
let sharrp-corners-south t = (|t with arc = (|t#arc with left-bottom = 0pt;right-bottom = 0pt;|);|)
let sharrp-corners-east t = (|t with arc = (|t#arc with right-top = 0pt;right-bottom = 0pt;|);|)
let sharrp-corners-west t = (|t with arc = (|t#arc with left-top = 0pt;left-bottom = 0pt;|);|)
let sharrp-corners-downhill t = (|t with arc = (|t#arc with left-top = 0pt;right-bottom = 0pt;|);|)
let sharrp-corners-uphill t = (|t with arc = (|t#arc with right-top = 0pt;left-bottom = 0pt;|);|)
let sharrp-corners-all t = arc 0pt t
let attach-boxed-title-on-top-left t = (|t with title-type = title-type-boxed-top-left|)
let attach-boxed-title-on-top-center t = (|t with title-type = title-type-boxed-top-center|)
let attach-boxed-title-on-top-right t = (|t with title-type = title-type-boxed-top-right|)
let attach-boxed-title-on-bottom-left t = (|t with title-type = title-type-boxed-bottom-left|)
let attach-boxed-title-on-bottom-center t = (|t with title-type = title-type-boxed-bottom-center|)
let attach-boxed-title-on-bottom-right t = (|t with title-type = title-type-boxed-bottom-right|)
let flip-title t = (|t with title-type = title-type-normal-flip|)
let boxtitle-xshift l t = (|t with boxtitle-xshift = l|)
let boxtitle-yshift l t = (|t with boxtitle-yshift = l|)
let boxed-title-colframe c t = (|t with boxed-title-colframe = Some(c)|)
let shadow x y o c t = (|t with shadow = shadow-graphic (|xshift = x;yshift = y;offset = o;color = c#color;|);|)
let drop-shadow t = shadow 0.9mm -0.9mm 0mm (|color = (Color.gray 0.75)|) t
let drop-midday-shadow t = shadow 0mm -0.8mm -0.4mm (|color = (Color.gray 0.75)|) t
let drop-shadow-southeast t = shadow 0.9mm -0.9mm 0mm (|color = (Color.gray 0.75)|) t
let drop-shadow-south t = shadow 0mm -0.8mm -0.4mm (|color = (Color.gray 0.75)|) t
let drop-shadow-southwest t = shadow -0.9mm -0.9mm 0mm (|color = (Color.gray 0.75)|) t
let drop-shadow-west t = shadow -0.8mm 0mm -0.4mm (|color = (Color.gray 0.75)|) t
let drop-shadow-northwest t = shadow -0.9mm 0.9mm 0mm (|color = (Color.gray 0.75)|) t
let drop-shadow-north t = shadow 0mm 0.8mm -0.4mm (|color = (Color.gray 0.75)|) t
let drop-shadow-northeast t = shadow 0.9mm 0.9mm 0mm (|color = (Color.gray 0.75)|) t
let drop-shadow-east t = shadow 0.8mm 0mm -0.4mm (|color = (Color.gray 0.75)|) t
let watermark-text txt t = (|t with watermark = (|unbroken = txt;first = txt;middle = txt;last = txt;|);|)
let watermark-text-on-unbroken txt t = (|t with watermark = (|t#watermark with unbroken = txt;|);|)
let watermark-text-on-broken txt t = (|t with watermark = (|t#watermark with first = txt;middle = txt;last = txt;|);|)
let watermark-text-on-first txt t = (|t with watermark = (|t#watermark with first = txt;|);|)
let watermark-text-on-middle txt t = (|t with watermark = (|t#watermark with middle = txt;|);|)
let watermark-text-on-last txt t = (|t with watermark = (|t#watermark with last = txt;|);|)
let watermark-text-on-unbroken-and-first txt t = (|t with watermark = (|t#watermark with unbroken = txt;first = txt;|);|)
let watermark-text-on-middle-and-last txt t = (|t with watermark = (|t#watermark with middle = txt;last = txt;|);|)
let watermark-text-on-first-and-middle txt t = (|t with watermark = (|t#watermark with first = txt;middle = txt;|);|)
let watermark-zoom f t = (|t with watermark-zoom = f;|)
let watermark-color c t = (|t with watermark-color = c;|)

let-block ctx +colorbox option ?:title-txt text =
  let default-option = (|
    left = 4mm;
    right = 4mm;
    bottom = 2mm;
    top = 2mm;
    toptitle = 0mm;
    bottomtitle = 0mm;
    lefttitle = 0mm;
    righttitle = 0mm;
    boxsep = 1mm;
    coltext = Color.black;
    colframe = (Color.gray 0.25);
    colback = (Color.gray 0.95);
    fonttitle = [];
    coltitle = Color.white;
    colbacktitle = (Color.gray 0.5);
    title-filled = false;
    title-type = title-type-normal;
    before-skip = 0pt;
    after-skip = 0pt;
    left-skip = 0pt;
    right-skip = 0pt;
    toprule = 0.5mm;
    bottomrule= 0.5mm;
    leftrule = 0.5mm;
    rightrule = 0.5mm;
    titlerule = 0.5mm;
    arc = (|left-top = 1mm;right-top = 1mm;left-bottom = 1mm;right-bottom = 1mm;|);
    boxtitle-xshift = 0pt;
    boxtitle-yshift = 0pt;
    boxed-title-colframe = None;
    shadow = (fun _ _ _ _ _ _ _ _ -> []);
    watermark = (|unbroken = {};first = {};middle = {};last = {};|);
    watermark-zoom = 0.75;
    watermark-color = Color.gray 0.85;
  |) in
  
  let opt = List.fold-left (fun t f -> (f t)) default-option option in
  let config = make-config opt in
  let frame = make-colorbox-frame opt#colframe opt in
  let title = make-title opt in
  let watermark cfg frame ctx index pt width height depth =
    if index == 0 then
      watermark-graphic opt#watermark-zoom opt#watermark-color opt#watermark#unbroken cfg frame ctx index pt width height depth
    else if index == 1 then
      watermark-graphic opt#watermark-zoom opt#watermark-color opt#watermark#first cfg frame ctx index pt width height depth
    else if index == 2 then
      watermark-graphic opt#watermark-zoom opt#watermark-color opt#watermark#middle cfg frame ctx index pt width height depth
    else if index == 3 then
      watermark-graphic opt#watermark-zoom opt#watermark-color opt#watermark#last cfg frame ctx index pt width height depth
    else 
      let () = abort-with-message (#`wrong index `# ^ (arabic index) ^ #` in watermark, may be a bug`#) in
      []
  in
  let config2 = (|title = title;overlay = [watermark];shadow = [opt#shadow];|) in
  match title-txt with
  | Some(t) -> colorbox-scheme config frame config2 ctx ?:t text
  | None -> colorbox-scheme config frame config2 ctx text




end
